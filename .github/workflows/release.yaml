name: Release Drafter

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: [ "VERSION" ]

permissions:
  contents: write
  pull-requests: write

env:
  GO_VERSION: 1.24.2

jobs:
  draft_release:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.draft.outputs.tag_name }}

    steps:
      - uses: actions/checkout@v4

      - name: Read version file
        id: read_version
        run: |
          set -euo pipefail
          VERSION=$(cat VERSION | tr -d '[:space:]')
          echo "version=$VERSION" >>"$GITHUB_OUTPUT"

      - name: Draft/Update release
        id: draft
        uses: release-drafter/release-drafter@v6
        with:
          version: ${{ steps.read_version.outputs.version }}
          name: v${{ steps.read_version.outputs.version }}
          tag:  v${{ steps.read_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_and_publish:
    needs: draft_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # macOS
          - { goos: darwin,  goarch: amd64 }
          - { goos: darwin,  goarch: arm64 }
          # Linux
          - { goos: linux,   goarch: amd64 }
          - { goos: linux,   goarch: arm }
          - { goos: linux,   goarch: arm64 }
          - { goos: linux,   goarch: mips }
          - { goos: linux,   goarch: mipsle }
          - { goos: linux,   goarch: mips64 }
          - { goos: linux,   goarch: mips64le }
          - { goos: linux,   goarch: ppc64le }
          - { goos: linux,   goarch: riscv64 }
          - { goos: linux,   goarch: s390x }
          # Windows
          - { goos: windows, goarch: amd64 }
          - { goos: windows, goarch: arm64 }

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build, package, checksum
        env:
          GOOS:   ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          TAG:    ${{ needs.draft_release.outputs.tag_name }}
        run: |
          set -euo pipefail
          OUT="tunnelr-${GOOS}-${GOARCH}"
          if [ "$GOOS" = "windows" ]; then
            BIN="${OUT}.exe"
            go build -ldflags="-w -s" -o "$BIN" ./cmd/client/tunnelr
            sha256sum "$BIN" >"${BIN}.sha256"
            gh release upload "$TAG" "$BIN" "${BIN}.sha256" --clobber
          else
            go build -ldflags="-w -s" -o tunnelr ./cmd/client/tunnelr
            tar -czf "${OUT}.tar.gz" tunnelr
            sha256sum "${OUT}.tar.gz" >"${OUT}.tar.gz.sha256"
            gh release upload "$TAG" "${OUT}.tar.gz" "${OUT}.tar.gz.sha256" --clobber
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}